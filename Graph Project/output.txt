Mon May  1 04:23:07 UTC 2023
Linux LinuxMachine 5.15.49-linuxkit #1 SMP PREEMPT Tue Sep 13 07:51:32 UTC 2022 aarch64 aarch64 aarch64 GNU/Linux
uid=1000(cssuwbstudent) gid=1000(cssuwbstudent) groups=1000(cssuwbstudent),10(wheel)
=====================================================
1. Compiles without warnings with -Wall -Wextra flags
=====================================================
=====================================================
2. Runs and produces correct output
=====================================================
testGraph0DFS
testGraph0BFS
testGraph0Dijkstra
testGraph0NotDirected
testGraph1
Done!
=====================================================
3. clang-tidy warnings are fixed
=====================================================
20344 warnings generated.
35558 warnings generated.
46936 warnings generated.
58102 warnings generated.
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:38:6: error: function 'testGraphBasic' has cognitive complexity of 45 (threshold 25) [readability-function-cognitive-complexity,-warnings-as-errors]
void testGraphBasic() {
     ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:40:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(g.add("a") && "add vertex a");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:40:21: note: +1
  assert(g.add("a") && "add vertex a");
                    ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:41:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(g.add("b") && "add vertex b");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:41:21: note: +1
  assert(g.add("b") && "add vertex b");
                    ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:42:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(g.add("c") && "add vertex c");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:42:21: note: +1
  assert(g.add("c") && "add vertex c");
                    ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:43:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(g.add("d") && "add vertex d");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:43:21: note: +1
  assert(g.add("d") && "add vertex d");
                    ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:44:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(g.add("e") && "add vertex e");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:44:21: note: +1
  assert(g.add("e") && "add vertex e");
                    ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:45:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(!g.add("b") && "b added twice");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:45:22: note: +1
  assert(!g.add("b") && "b added twice");
                     ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:46:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(g.connect("a", "b", 10) && "connect a b");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:46:34: note: +1
  assert(g.connect("a", "b", 10) && "connect a b");
                                 ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:47:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(!g.connect("a", "b", 50) && "duplicate connect a b");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:47:35: note: +1
  assert(!g.connect("a", "b", 50) && "duplicate connect a b");
                                  ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:48:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(!g.connect("a", "a", 1) && "connect a to itself");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:48:34: note: +1
  assert(!g.connect("a", "a", 1) && "connect a to itself");
                                 ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:51:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert((g.verticesSize() == 5) && "graph number of vertices");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:51:34: note: +1
  assert((g.verticesSize() == 5) && "graph number of vertices");
                                 ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:52:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert((g.edgesSize() == 3) && "graph number of edges");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:52:31: note: +1
  assert((g.edgesSize() == 3) && "graph number of edges");
                              ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:53:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert((g.vertexDegree("a") == 3) && "vertex number of edges");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:53:37: note: +1
  assert((g.vertexDegree("a") == 3) && "vertex number of edges");
                                    ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:54:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert((g.vertexDegree("c") == 0) && "no outgoing edges c");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:54:37: note: +1
  assert((g.vertexDegree("c") == 0) && "no outgoing edges c");
                                    ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:55:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert((g.vertexDegree("xxx") == -1) && "no edges for xxx");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:55:40: note: +1
  assert((g.vertexDegree("xxx") == -1) && "no edges for xxx");
                                       ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:56:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(!g.contains("xxx") && "xxx not in graph");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:56:29: note: +1
  assert(!g.contains("xxx") && "xxx not in graph");
                            ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:57:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(g.contains("a") && "a in graph");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:57:26: note: +1
  assert(g.contains("a") && "a in graph");
                         ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:60:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(g.getEdgesAsString("a") == "b(10),c(20),d(40)");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:62:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(!g.disconnect("a", "e") && "disconnecting non-existent vertex");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:62:34: note: +1
  assert(!g.disconnect("a", "e") && "disconnecting non-existent vertex");
                                 ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:63:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert((g.edgesSize() == 3) && "disconnected nonexisting");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:63:31: note: +1
  assert((g.edgesSize() == 3) && "disconnected nonexisting");
                              ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:64:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(g.disconnect("a", "c") && "a-c disconnect");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:64:33: note: +1
  assert(g.disconnect("a", "c") && "a-c disconnect");
                                ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:65:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert((g.edgesSize() == 2) && "number of edges after disconnect");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:65:31: note: +1
  assert((g.edgesSize() == 2) && "number of edges after disconnect");
                              ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:66:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert((g.vertexDegree("a") == 2) && "a has 2 edges");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:66:37: note: +1
  assert((g.vertexDegree("a") == 2) && "a has 2 edges");
                                    ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:67:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(g.getEdgesAsString("a") == "b(10),d(40)" && "removing middle edge");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:67:51: note: +1
  assert(g.getEdgesAsString("a") == "b(10),d(40)" && "removing middle edge");
                                                  ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:146:6: error: function 'testGraph0NotDirected' has cognitive complexity of 35 (threshold 25) [readability-function-cognitive-complexity,-warnings-as-errors]
void testGraph0NotDirected() {
     ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:150:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if (!g.readFile("graph0.txt")) {
  ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:156:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(globalSS.str() == "ABC" && "starting from A");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:156:34: note: +1
  assert(globalSS.str() == "ABC" && "starting from A");
                                 ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:160:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(globalSS.str() == "BAC" && "starting from B");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:160:34: note: +1
  assert(globalSS.str() == "BAC" && "starting from B");
                                 ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:164:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(globalSS.str() == "CAB" && "starting from C");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:164:34: note: +1
  assert(globalSS.str() == "CAB" && "starting from C");
                                 ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:168:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(globalSS.str().empty() && "starting from X");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:168:33: note: +1
  assert(globalSS.str().empty() && "starting from X");
                                ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:174:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(map2string(weights) == "[B:1][C:4]" && "Dijkstra(A) weights");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:174:46: note: +1
  assert(map2string(weights) == "[B:1][C:4]" && "Dijkstra(A) weights");
                                             ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:176:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(map2string(previous) == "[B:A][C:B]" && "Dijkstra(A) previous");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:176:47: note: +1
  assert(map2string(previous) == "[B:A][C:B]" && "Dijkstra(A) previous");
                                              ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:179:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(map2string(weights) == "[A:1][C:3]" && "Dijkstra(B) weights");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:179:46: note: +1
  assert(map2string(weights) == "[A:1][C:3]" && "Dijkstra(B) weights");
                                             ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:180:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(map2string(previous) == "[A:B][C:B]" && "Dijkstra(B) previous");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:180:47: note: +1
  assert(map2string(previous) == "[A:B][C:B]" && "Dijkstra(B) previous");
                                              ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:183:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(map2string(weights).empty() && "Dijkstra(C) weights");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:183:38: note: +1
  assert(map2string(weights).empty() && "Dijkstra(C) weights");
                                     ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:184:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(map2string(previous).empty() && "Dijkstra(C) previous");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:184:39: note: +1
  assert(map2string(previous).empty() && "Dijkstra(C) previous");
                                      ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:188:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(mstLength == 4 && "mst A is 4");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:188:25: note: +1
  assert(mstLength == 4 && "mst A is 4");
                        ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:189:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(globalSS.str() == "[AB 1][BC 3]" && "mst A is [AB 1][BC 3]");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:189:43: note: +1
  assert(globalSS.str() == "[AB 1][BC 3]" && "mst A is [AB 1][BC 3]");
                                          ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:193:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(mstLength == 4 && "mst 4 is 4");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:193:25: note: +1
  assert(mstLength == 4 && "mst 4 is 4");
                        ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:194:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(globalSS.str() == "[BA 1][BC 3]");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:198:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(mstLength == 4 && "mst C is 4");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:198:25: note: +1
  assert(mstLength == 4 && "mst C is 4");
                        ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:199:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(globalSS.str() == "[CB 3][BA 1]");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:203:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(mstLength == -1 && "mst X is -1");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:203:26: note: +1
  assert(mstLength == -1 && "mst X is -1");
                         ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:204:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(globalSS.str().empty() && "mst for vertex not found");
  ^
/usr/include/assert.h:91:7: note: expanded from macro 'assert'
      ? void (0)                                                        \
      ^
/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp:204:33: note: +1
  assert(globalSS.str().empty() && "mst for vertex not found");
                                ^
Suppressed 58100 warnings (58100 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
2 warnings treated as errors
=====================================================
4. clang-format does not find any formatting issues
=====================================================
Running clang-format on ./edge.cpp
Running clang-format on ./graph.cpp
Running clang-format on ./graphtest.cpp
Running clang-format on ./main.cpp
Running clang-format on ./vertex.cpp
=====================================================
5. No memory leaks using g++
=====================================================
=====================================================
6. No memory leaks using valgrind, look for "definitely lost" 
=====================================================
==4746== Memcheck, a memory error detector
==4746== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==4746== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
==4746== Command: ./a.out
==4746== Parent PID: 4502
==4746== 
==4746== 
==4746== HEAP SUMMARY:
==4746==     in use at exit: 0 bytes in 0 blocks
==4746==   total heap usage: 366 allocs, 366 frees, 146,220 bytes allocated
==4746== 
==4746== All heap blocks were freed -- no leaks are possible
==4746== 
==4746== For lists of detected and suppressed errors, rerun with: -s
==4746== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
=====================================================
7. Tests have full code coverage
=====================================================
File '/home/cssuwbstudent/hemzas/343-graph-Hemza2002/edge.cpp':
Name                                Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
---------------------------------------------------------------------------------------------------------------
Edge::Edge()                              1       1   0.00%         5       5   0.00%         0       0   0.00%
Edge::Edge(Vertex*, Vertex*, int)         1       0 100.00%         5       0 100.00%         0       0   0.00%
Edge::~Edge()                             1       0 100.00%         1       0 100.00%         0       0   0.00%
---------------------------------------------------------------------------------------------------------------
TOTAL                                     3       1  66.67%        11       5  54.55%         0       0   0.00%

File '/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graph.cpp':
Name                                                                                                                                                                                                                                                                                                          Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Graph::Graph(bool)                                                                                                                                                                                                                                                                                                  1       0 100.00%         4       0 100.00%         0       0   0.00%
Graph::~Graph()                                                                                                                                                                                                                                                                                                     2       0 100.00%         6       0 100.00%         2       0 100.00%
Graph::verticesSize() const                                                                                                                                                                                                                                                                                         1       0 100.00%         3       0 100.00%         0       0   0.00%
Graph::edgesSize() const                                                                                                                                                                                                                                                                                            2       0 100.00%         7       0 100.00%         2       0 100.00%
Graph::vertexDegree(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const                                                                                                                                                                                                   4       0 100.00%         6       0 100.00%         2       0 100.00%
Graph::add(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                                                                                                                                                  4       0 100.00%         7       0 100.00%         2       0 100.00%
Graph::contains(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const                                                                                                                                                                                                       1       0 100.00%         3       0 100.00%         0       0   0.00%
Graph::getEdgesAsString(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const                                                                                                                                                                                               6       0 100.00%        18       0 100.00%         6       1  83.33%
Graph::connect(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)                                                                                                                20       1  95.00%        32       0 100.00%        18       5  72.22%
Graph::disconnect(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                                                  22       9  59.09%        27      11  59.26%        20      11  45.00%
Graph::dfs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, void (*)(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&))                                                                                                               11       0 100.00%        21       0 100.00%         8       0 100.00%
Graph::bfs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, void (*)(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&))                                                                                                                9       1  88.89%        20       2  90.00%         8       1  87.50%
Graph::dijkstra(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const                                                                                                                                                                                                      17       0 100.00%        43       0 100.00%        16       0 100.00%
Graph::mstPrim(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, void (*)(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)) const        12       0 100.00%        32       0 100.00%        12       0 100.00%
Graph::readFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                                                                                                                                             8       1  87.50%        19       3  84.21%         6       1  83.33%
Graph::edgeHelperFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const                                                                                                                                                                                             5       1  80.00%        13       3  76.92%         4       1  75.00%
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                                                                                                                                                                             125      13  89.60%       261      19  92.72%       106      20  81.13%

File '/home/cssuwbstudent/hemzas/343-graph-Hemza2002/graphtest.cpp':
Nameegions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover

vertexPrinter(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const
edgePrinter(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          1       0 100.00%         3       0 100.00%         0       0   0.00%
testGraphBasic
testGraph
testGraph
testGraph0Dijkstra
testGraph0NotDirected
testGraph
testAll
graphtest.cpp:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > map2string<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> > > const&)                                                                                                                                                                                                                                               2       0 100.00%         7       0 100.00%         2       0 100.00%
graphtest.cpp:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > map2string<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&)         2       0 100.00%         7       0 100.00%         2       0 100.00%



File '/home/cssuwbstudent/hemzas/343-graph-Hemza2002/main.cpp':
Nameegions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover

main                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      1       0 100.00%         5       0 100.00%         0       0   0.00%



File '/home/cssuwbstudent/hemzas/343-graph-Hemza2002/vertex.cpp':
Nameegions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover

Vertex::Vertex
Vertex::Vertex(Vertex const
Vertex::Vertex(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const
Vertex::~Vertex
Vertex::findingEdge(Vertex
Vertex::addingNewEdge(Edge
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

=====================================================
The lines below were never executed
=====================================================
    9|      0|Edge::Edge() {
   10|      0|  this->from = nullptr;
   11|      0|  this->to = nullptr;
   12|      0|  this->weight = 0;
   13|      0|}
  132|      0|    return false;
  133|      0|  }
  146|      0|    for (auto it = vTo->edges.begin(); it != vTo->edges.end(); ++it) {
  147|      0|      if ((*it)->to->label == to && (*it)->from->label == from) {
  148|      0|        delete (*it);
  149|      0|        vTo->edges.erase(it);
  150|      0|        removed = true;
  151|      0|        break;
  152|      0|      }
  153|      0|    }
  154|      0|  }
  184|      0|    return;
  185|      0|  }
  297|      0|    cerr << "Error: Cannot open file " << filename << endl;
  298|      0|    return false;
  299|      0|  }
  322|      0|    cerr << "Vertex " << label << " not found in graph." << endl;
  323|      0|    return {};
  324|      0|  }
   41|      0|  assert(g.add("b") && "add vertex b");
   42|      0|  assert(g.add("c") && "add vertex c");
   43|      0|  assert(g.add("d") && "add vertex d");
   44|      0|  assert(g.add("e") && "add vertex e");
   45|      0|  assert(!g.add("b") && "b added twice");
   46|      0|  assert(g.connect("a", "b", 10) && "connect a b");
   47|      0|  assert(!g.connect("a", "b", 50) && "duplicate connect a b");
   48|      0|  assert(!g.connect("a", "a", 1) && "connect a to itself");
   49|      0|  g.connect("a", "d", 40);
   52|      0|  assert((g.edgesSize() == 3) && "graph number of edges");
   53|      0|  assert((g.vertexDegree("a") == 3) && "vertex number of edges");
   54|      0|  assert((g.vertexDegree("c") == 0) && "no outgoing edges c");
   55|      0|  assert((g.vertexDegree("xxx") == -1) && "no edges for xxx");
   56|      0|  assert(!g.contains("xxx") && "xxx not in graph");
   57|      0|  assert(g.contains("a") && "a in graph");
   60|      0|  assert(g.getEdgesAsString("a") == "b(10),c(20),d(40)");
   62|      0|  assert(!g.disconnect("a", "e") && "disconnecting non-existent vertex");
   63|      0|  assert((g.edgesSize() == 3) && "disconnected nonexisting");
   64|      0|  assert(g.disconnect("a", "c") && "a-c disconnect");
   65|      0|  assert((g.edgesSize() == 2) && "number of edges after disconnect");
   66|      0|  assert((g.vertexDegree("a") == 2) && "a has 2 edges");
   67|      0|  assert(g.getEdgesAsString("a") == "b(10),d(40)" && "removing middle edge");
   74|      0|    return;
   75|      0|  }
   77|      0|  assert(g.contains("B") && "b in graph");
   78|      0|  assert(g.contains("C") && "c in graph");
   79|      0|  assert(g.getEdgesAsString("A") == "B(1),C(8)");
   80|      0|  assert(g.getEdgesAsString("B") == "C(3)");
   81|      0|  assert(g.getEdgesAsString("C").empty());
   83|      0|  g.dfs("A", vertexPrinter);
   86|      0|  globalSS.str("");
   90|      0|  globalSS.str("");
   94|      0|  globalSS.str("");
  103|      0|    return;
  104|      0|  }
  110|      0|  globalSS.str("");
  114|      0|  globalSS.str("");
  118|      0|  globalSS.str("");
  127|      0|    return;
  128|      0|  }
  135|      0|  assert(map2string(previous) == "[B:A][C:B]" && "Dijkstra(A) previous");
  137|      0|  tie(weights, previous) = g.dijkstra("B");
  139|      0|  assert(map2string(previous) == "[C:B]" && "Dijkstra(B) previous");
  141|      0|  tie(weights, previous) = g.dijkstra("X");
  143|      0|  assert(map2string(previous).empty() && "Dijkstra(C) previous");
  151|      0|    return;
  152|      0|  }
  158|      0|  globalSS.str("");
  162|      0|  globalSS.str("");
  166|      0|  globalSS.str("");
  170|      0|  map<string, int> weights;
  176|      0|  assert(map2string(previous) == "[B:A][C:B]" && "Dijkstra(A) previous");
  178|      0|  tie(weights, previous) = g.dijkstra("B");
  180|      0|  assert(map2string(previous) == "[A:B][C:B]" && "Dijkstra(B) previous");
  182|      0|  tie(weights, previous) = g.dijkstra("X");
  184|      0|  assert(map2string(previous).empty() && "Dijkstra(C) previous");
  186|      0|  globalSS.str("");
  189|      0|  assert(globalSS.str() == "[AB 1][BC 3]" && "mst A is [AB 1][BC 3]");
  191|      0|  globalSS.str("");
  194|      0|  assert(globalSS.str() == "[BA 1][BC 3]");
  196|      0|  globalSS.str("");
  199|      0|  assert(globalSS.str() == "[CB 3][BA 1]");
  201|      0|  globalSS.str("");
  204|      0|  assert(globalSS.str().empty() && "mst for vertex not found");
  211|      0|    return;
  212|      0|  }
  217|      0|  globalSS.str("");
  221|      0|  globalSS.str("");
  225|      0|  globalSS.str("");
  229|      0|  map<string, int> weights;
  236|      0|  assert(map2string(previous) == "[B:A][C:B][D:C][E:D][F:E][G:H][H:A]" &&
   13|      0|Vertex::Vertex() = default;
   17|      0|Vertex::Vertex(const Vertex &vertex) {
   18|      0|  this->label = vertex.label;
   19|      0|  for (const auto &edge : vertex.edges) {
   20|      0|    this->edges.push_back(new Edge(edge->from, edge->to, edge->weight));
   21|      0|  }
   22|      0|}
Mon May  1 04:23:27 UTC 2023
=====================================================
To create an output.txt file with all the output from this script
Run the below command
      ./create-output.sh > output.txt 2>&1 
=====================================================
