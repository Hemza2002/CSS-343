// Completed by Hemza Al Shamari
// 04/30/23
// hemzas@uw.edu

#ifndef EDGE_H
#define EDGE_H

// Forward declaration of the Vertex class
class Vertex;

class Edge {
  // Allow the Vertex and Graph classes to access the private members of Edge
  friend class Vertex;
  friend class Graph;

public:
  // Default constructor: initializes "from" and "to" vertices to null and
  // weight to 0
  Edge();

  // Constructor that takes two vertices and a weight and sets the member
  // variables accordingly
  Edge(Vertex *vFrom, Vertex *vTo, int weight);

  // Destructor: automatically generated by the compiler and frees memory used
  // by the Edge object when it is destroyed
  ~Edge();

  // Delete the copy constructor, move constructor, assignment operator, and
  // move assignment operator to prevent unintended copying/moving of Edge
  // objects
  Edge(const Edge &edge) = delete;
  Edge(Edge &&other) = delete;
  Edge &operator=(const Edge &other) = delete;
  Edge &operator=(Edge &&other) = delete;

private:
  // Member variables for Edge
  Vertex *from;
  Vertex *to;
  int weight;
};

#endif
